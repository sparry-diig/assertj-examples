package diig.shaun.com;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;

/**
 * {@link Stock} specific assertions - Generated by CustomAssertionGenerator.
 */
public class StockAssert extends AbstractAssert<StockAssert, Stock> {

  /**
   * Creates a new <code>{@link StockAssert}</code> to make assertions on actual Stock.
   * @param actual the Stock we want to make assertions on.
   */
  public StockAssert(Stock actual) {
    super(actual, StockAssert.class);
  }

  /**
   * An entry point for StockAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myStock)</code> and get specific assertion with code completion.
   * @param actual the Stock we want to make assertions on.
   * @return a new <code>{@link StockAssert}</code>
   */
  public static StockAssert assertThat(Stock actual) {
    return new StockAssert(actual);
  }

  /**
   * Verifies that the actual Stock's currency is equal to the given one.
   * @param currency the given currency to compare the actual Stock's currency to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Stock's currency is not equal to the given one.
   */
  public StockAssert hasCurrency(String currency) {
    // check that actual Stock we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting currency of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualCurrency = actual.getCurrency();
    if (!Objects.areEqual(actualCurrency, currency)) {
      failWithMessage(assertjErrorMessage, actual, currency, actualCurrency);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Stock's currentPrice is equal to the given one.
   * @param currentPrice the given currentPrice to compare the actual Stock's currentPrice to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Stock's currentPrice is not equal to the given one.
   */
  public StockAssert hasCurrentPrice(double currentPrice) {
    // check that actual Stock we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting currentPrice of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    double actualCurrentPrice = actual.getCurrentPrice();
    if (actualCurrentPrice != currentPrice) {
      failWithMessage(assertjErrorMessage, actual, currentPrice, actualCurrentPrice);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Stock's currentPrice is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param currentPrice the value to compare the actual Stock's currentPrice to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Stock's currentPrice is not close enough to the given value.
   */
  public StockAssert hasCurrentPriceCloseTo(double currentPrice, double offset) {
    // check that actual Stock we want to make assertions on is not null.
    isNotNull();

    double actualCurrentPrice = actual.getCurrentPrice();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting currentPrice:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualCurrentPrice, currentPrice, offset, Math.abs(currentPrice - actualCurrentPrice));
    
    // check
    Assertions.assertThat(actualCurrentPrice).overridingErrorMessage(assertjErrorMessage).isCloseTo(currentPrice, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Stock's market is equal to the given one.
   * @param market the given market to compare the actual Stock's market to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Stock's market is not equal to the given one.
   */
  public StockAssert hasMarket(String market) {
    // check that actual Stock we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting market of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualMarket = actual.getMarket();
    if (!Objects.areEqual(actualMarket, market)) {
      failWithMessage(assertjErrorMessage, actual, market, actualMarket);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Stock's name is equal to the given one.
   * @param name the given name to compare the actual Stock's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Stock's name is not equal to the given one.
   */
  public StockAssert hasName(String name) {
    // check that actual Stock we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Stock's quantity is equal to the given one.
   * @param quantity the given quantity to compare the actual Stock's quantity to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Stock's quantity is not equal to the given one.
   */
  public StockAssert hasQuantity(long quantity) {
    // check that actual Stock we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting quantity of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualQuantity = actual.getQuantity();
    if (actualQuantity != quantity) {
      failWithMessage(assertjErrorMessage, actual, quantity, actualQuantity);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Stock's symbol is equal to the given one.
   * @param symbol the given symbol to compare the actual Stock's symbol to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Stock's symbol is not equal to the given one.
   */
  public StockAssert hasSymbol(String symbol) {
    // check that actual Stock we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting symbol of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSymbol = actual.getSymbol();
    if (!Objects.areEqual(actualSymbol, symbol)) {
      failWithMessage(assertjErrorMessage, actual, symbol, actualSymbol);
    }

    // return the current assertion for method chaining
    return this;
  }

}
